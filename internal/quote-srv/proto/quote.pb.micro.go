// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: quote.proto

package fotune_srv_quote

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for QuoteService internal

func NewQuoteServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for QuoteService internal

type QuoteService interface {
	GetTicksWithExchange(ctx context.Context, in *GetTicksReq, opts ...client.CallOption) (*TickResp, error)
	GetTicksWithExchangeSymbol(ctx context.Context, in *GetTicksSymbolReq, opts ...client.CallOption) (*TickResp, error)
	StreamOkexTicks(ctx context.Context, in *GetTicksReq, opts ...client.CallOption) (QuoteService_StreamOkexTicksService, error)
	GetRate(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*RateUsdRmb, error)
}

type quoteService struct {
	c    client.Client
	name string
}

func NewQuoteService(name string, c client.Client) QuoteService {
	return &quoteService{
		c:    c,
		name: name,
	}
}

func (c *quoteService) GetTicksWithExchange(ctx context.Context, in *GetTicksReq, opts ...client.CallOption) (*TickResp, error) {
	req := c.c.NewRequest(c.name, "QuoteService.GetTicksWithExchange", in)
	out := new(TickResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteService) GetTicksWithExchangeSymbol(ctx context.Context, in *GetTicksSymbolReq, opts ...client.CallOption) (*TickResp, error) {
	req := c.c.NewRequest(c.name, "QuoteService.GetTicksWithExchangeSymbol", in)
	out := new(TickResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteService) StreamOkexTicks(ctx context.Context, in *GetTicksReq, opts ...client.CallOption) (QuoteService_StreamOkexTicksService, error) {
	req := c.c.NewRequest(c.name, "QuoteService.StreamOkexTicks", &GetTicksReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &quoteServiceStreamOkexTicks{stream}, nil
}

type QuoteService_StreamOkexTicksService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*TickResp, error)
}

type quoteServiceStreamOkexTicks struct {
	stream client.Stream
}

func (x *quoteServiceStreamOkexTicks) Close() error {
	return x.stream.Close()
}

func (x *quoteServiceStreamOkexTicks) Context() context.Context {
	return x.stream.Context()
}

func (x *quoteServiceStreamOkexTicks) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *quoteServiceStreamOkexTicks) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *quoteServiceStreamOkexTicks) Recv() (*TickResp, error) {
	m := new(TickResp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *quoteService) GetRate(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*RateUsdRmb, error) {
	req := c.c.NewRequest(c.name, "QuoteService.GetRate", in)
	out := new(RateUsdRmb)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for QuoteService internal

type QuoteServiceHandler interface {
	GetTicksWithExchange(context.Context, *GetTicksReq, *TickResp) error
	GetTicksWithExchangeSymbol(context.Context, *GetTicksSymbolReq, *TickResp) error
	StreamOkexTicks(context.Context, *GetTicksReq, QuoteService_StreamOkexTicksStream) error
	GetRate(context.Context, *empty.Empty, *RateUsdRmb) error
}

func RegisterQuoteServiceHandler(s server.Server, hdlr QuoteServiceHandler, opts ...server.HandlerOption) error {
	type quoteService interface {
		GetTicksWithExchange(ctx context.Context, in *GetTicksReq, out *TickResp) error
		GetTicksWithExchangeSymbol(ctx context.Context, in *GetTicksSymbolReq, out *TickResp) error
		StreamOkexTicks(ctx context.Context, stream server.Stream) error
		GetRate(ctx context.Context, in *empty.Empty, out *RateUsdRmb) error
	}
	type QuoteService struct {
		quoteService
	}
	h := &quoteServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&QuoteService{h}, opts...))
}

type quoteServiceHandler struct {
	QuoteServiceHandler
}

func (h *quoteServiceHandler) GetTicksWithExchange(ctx context.Context, in *GetTicksReq, out *TickResp) error {
	return h.QuoteServiceHandler.GetTicksWithExchange(ctx, in, out)
}

func (h *quoteServiceHandler) GetTicksWithExchangeSymbol(ctx context.Context, in *GetTicksSymbolReq, out *TickResp) error {
	return h.QuoteServiceHandler.GetTicksWithExchangeSymbol(ctx, in, out)
}

func (h *quoteServiceHandler) StreamOkexTicks(ctx context.Context, stream server.Stream) error {
	m := new(GetTicksReq)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.QuoteServiceHandler.StreamOkexTicks(ctx, m, &quoteServiceStreamOkexTicksStream{stream})
}

type QuoteService_StreamOkexTicksStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*TickResp) error
}

type quoteServiceStreamOkexTicksStream struct {
	stream server.Stream
}

func (x *quoteServiceStreamOkexTicksStream) Close() error {
	return x.stream.Close()
}

func (x *quoteServiceStreamOkexTicksStream) Context() context.Context {
	return x.stream.Context()
}

func (x *quoteServiceStreamOkexTicksStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *quoteServiceStreamOkexTicksStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *quoteServiceStreamOkexTicksStream) Send(m *TickResp) error {
	return x.stream.Send(m)
}

func (h *quoteServiceHandler) GetRate(ctx context.Context, in *empty.Empty, out *RateUsdRmb) error {
	return h.QuoteServiceHandler.GetRate(ctx, in, out)
}
