// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

package fotune_srv_user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for User internal

func NewUserEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for User internal

type UserService interface {
	Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginResp, error)
	SendValidateCode(ctx context.Context, in *ValidateCodeReq, opts ...client.CallOption) (*ValidateCodeResp, error)
	Register(ctx context.Context, in *RegisterReq, opts ...client.CallOption) (*empty.Empty, error)
	ResetPassword(ctx context.Context, in *ChangePasswordReq, opts ...client.CallOption) (*empty.Empty, error)
	ForgetPassword(ctx context.Context, in *ForgetPasswordReq, opts ...client.CallOption) (*empty.Empty, error)
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...client.CallOption) (*empty.Empty, error)
	GetUserInfo(ctx context.Context, in *UserInfoReq, opts ...client.CallOption) (*LoginResp, error)
	GetMembers(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*GetMembersResp, error)
	GetPaymentMethod(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*GetPaymentMethodResp, error)
	GetAllUserInfo(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*AllUserInfoResp, error)
	GetUserMasterByInViteUser(ctx context.Context, in *GetUserMasterReq, opts ...client.CallOption) (*UserMasterResp, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginResp, error) {
	req := c.c.NewRequest(c.name, "User.Login", in)
	out := new(LoginResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) SendValidateCode(ctx context.Context, in *ValidateCodeReq, opts ...client.CallOption) (*ValidateCodeResp, error) {
	req := c.c.NewRequest(c.name, "User.SendValidateCode", in)
	out := new(ValidateCodeResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Register(ctx context.Context, in *RegisterReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "User.Register", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ResetPassword(ctx context.Context, in *ChangePasswordReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "User.ResetPassword", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ForgetPassword(ctx context.Context, in *ForgetPasswordReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "User.ForgetPassword", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "User.UpdateUser", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserInfo(ctx context.Context, in *UserInfoReq, opts ...client.CallOption) (*LoginResp, error) {
	req := c.c.NewRequest(c.name, "User.GetUserInfo", in)
	out := new(LoginResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetMembers(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*GetMembersResp, error) {
	req := c.c.NewRequest(c.name, "User.GetMembers", in)
	out := new(GetMembersResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetPaymentMethod(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*GetPaymentMethodResp, error) {
	req := c.c.NewRequest(c.name, "User.GetPaymentMethod", in)
	out := new(GetPaymentMethodResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetAllUserInfo(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*AllUserInfoResp, error) {
	req := c.c.NewRequest(c.name, "User.GetAllUserInfo", in)
	out := new(AllUserInfoResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserMasterByInViteUser(ctx context.Context, in *GetUserMasterReq, opts ...client.CallOption) (*UserMasterResp, error) {
	req := c.c.NewRequest(c.name, "User.GetUserMasterByInViteUser", in)
	out := new(UserMasterResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User internal

type UserHandler interface {
	Login(context.Context, *LoginReq, *LoginResp) error
	SendValidateCode(context.Context, *ValidateCodeReq, *ValidateCodeResp) error
	Register(context.Context, *RegisterReq, *empty.Empty) error
	ResetPassword(context.Context, *ChangePasswordReq, *empty.Empty) error
	ForgetPassword(context.Context, *ForgetPasswordReq, *empty.Empty) error
	UpdateUser(context.Context, *UpdateUserReq, *empty.Empty) error
	GetUserInfo(context.Context, *UserInfoReq, *LoginResp) error
	GetMembers(context.Context, *empty.Empty, *GetMembersResp) error
	GetPaymentMethod(context.Context, *empty.Empty, *GetPaymentMethodResp) error
	GetAllUserInfo(context.Context, *empty.Empty, *AllUserInfoResp) error
	GetUserMasterByInViteUser(context.Context, *GetUserMasterReq, *UserMasterResp) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		Login(ctx context.Context, in *LoginReq, out *LoginResp) error
		SendValidateCode(ctx context.Context, in *ValidateCodeReq, out *ValidateCodeResp) error
		Register(ctx context.Context, in *RegisterReq, out *empty.Empty) error
		ResetPassword(ctx context.Context, in *ChangePasswordReq, out *empty.Empty) error
		ForgetPassword(ctx context.Context, in *ForgetPasswordReq, out *empty.Empty) error
		UpdateUser(ctx context.Context, in *UpdateUserReq, out *empty.Empty) error
		GetUserInfo(ctx context.Context, in *UserInfoReq, out *LoginResp) error
		GetMembers(ctx context.Context, in *empty.Empty, out *GetMembersResp) error
		GetPaymentMethod(ctx context.Context, in *empty.Empty, out *GetPaymentMethodResp) error
		GetAllUserInfo(ctx context.Context, in *empty.Empty, out *AllUserInfoResp) error
		GetUserMasterByInViteUser(ctx context.Context, in *GetUserMasterReq, out *UserMasterResp) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) Login(ctx context.Context, in *LoginReq, out *LoginResp) error {
	return h.UserHandler.Login(ctx, in, out)
}

func (h *userHandler) SendValidateCode(ctx context.Context, in *ValidateCodeReq, out *ValidateCodeResp) error {
	return h.UserHandler.SendValidateCode(ctx, in, out)
}

func (h *userHandler) Register(ctx context.Context, in *RegisterReq, out *empty.Empty) error {
	return h.UserHandler.Register(ctx, in, out)
}

func (h *userHandler) ResetPassword(ctx context.Context, in *ChangePasswordReq, out *empty.Empty) error {
	return h.UserHandler.ResetPassword(ctx, in, out)
}

func (h *userHandler) ForgetPassword(ctx context.Context, in *ForgetPasswordReq, out *empty.Empty) error {
	return h.UserHandler.ForgetPassword(ctx, in, out)
}

func (h *userHandler) UpdateUser(ctx context.Context, in *UpdateUserReq, out *empty.Empty) error {
	return h.UserHandler.UpdateUser(ctx, in, out)
}

func (h *userHandler) GetUserInfo(ctx context.Context, in *UserInfoReq, out *LoginResp) error {
	return h.UserHandler.GetUserInfo(ctx, in, out)
}

func (h *userHandler) GetMembers(ctx context.Context, in *empty.Empty, out *GetMembersResp) error {
	return h.UserHandler.GetMembers(ctx, in, out)
}

func (h *userHandler) GetPaymentMethod(ctx context.Context, in *empty.Empty, out *GetPaymentMethodResp) error {
	return h.UserHandler.GetPaymentMethod(ctx, in, out)
}

func (h *userHandler) GetAllUserInfo(ctx context.Context, in *empty.Empty, out *AllUserInfoResp) error {
	return h.UserHandler.GetAllUserInfo(ctx, in, out)
}

func (h *userHandler) GetUserMasterByInViteUser(ctx context.Context, in *GetUserMasterReq, out *UserMasterResp) error {
	return h.UserHandler.GetUserMasterByInViteUser(ctx, in, out)
}
