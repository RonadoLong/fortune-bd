// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: wallet.proto

package fotune_srv_wallet

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for WalletService internal

func NewWalletServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for WalletService internal

type WalletService interface {
	CreateWallet(ctx context.Context, in *UidReq, opts ...client.CallOption) (*empty.Empty, error)
	Transfer(ctx context.Context, in *TransferReq, opts ...client.CallOption) (*empty.Empty, error)
	GetWalletIFC(ctx context.Context, in *UidReq, opts ...client.CallOption) (*WalletBalanceResp, error)
	GetWalletUSDT(ctx context.Context, in *UidReq, opts ...client.CallOption) (*WalletBalanceResp, error)
	GetUsdtDepositAddr(ctx context.Context, in *UidReq, opts ...client.CallOption) (*UsdtDepositAddrResp, error)
	ConvertCoinTips(ctx context.Context, in *ConvertCoinTipsReq, opts ...client.CallOption) (*ConvertCoinTipsResp, error)
	ConvertCoin(ctx context.Context, in *ConvertCoinReq, opts ...client.CallOption) (*ConvertCoinResp, error)
	Withdrawal(ctx context.Context, in *WithdrawalReq, opts ...client.CallOption) (*empty.Empty, error)
	AddIfcBalance(ctx context.Context, in *AddIfcBalanceReq, opts ...client.CallOption) (*empty.Empty, error)
	GetTotalRebate(ctx context.Context, in *GetTotalRebateReq, opts ...client.CallOption) (*GetTotalRebateResp, error)
	StrategyRunNotify(ctx context.Context, in *StrategyRunNotifyReq, opts ...client.CallOption) (*empty.Empty, error)
}

type walletService struct {
	c    client.Client
	name string
}

func NewWalletService(name string, c client.Client) WalletService {
	return &walletService{
		c:    c,
		name: name,
	}
}

func (c *walletService) CreateWallet(ctx context.Context, in *UidReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "WalletService.CreateWallet", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) Transfer(ctx context.Context, in *TransferReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "WalletService.Transfer", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) GetWalletIFC(ctx context.Context, in *UidReq, opts ...client.CallOption) (*WalletBalanceResp, error) {
	req := c.c.NewRequest(c.name, "WalletService.GetWalletIFC", in)
	out := new(WalletBalanceResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) GetWalletUSDT(ctx context.Context, in *UidReq, opts ...client.CallOption) (*WalletBalanceResp, error) {
	req := c.c.NewRequest(c.name, "WalletService.GetWalletUSDT", in)
	out := new(WalletBalanceResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) GetUsdtDepositAddr(ctx context.Context, in *UidReq, opts ...client.CallOption) (*UsdtDepositAddrResp, error) {
	req := c.c.NewRequest(c.name, "WalletService.GetUsdtDepositAddr", in)
	out := new(UsdtDepositAddrResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) ConvertCoinTips(ctx context.Context, in *ConvertCoinTipsReq, opts ...client.CallOption) (*ConvertCoinTipsResp, error) {
	req := c.c.NewRequest(c.name, "WalletService.ConvertCoinTips", in)
	out := new(ConvertCoinTipsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) ConvertCoin(ctx context.Context, in *ConvertCoinReq, opts ...client.CallOption) (*ConvertCoinResp, error) {
	req := c.c.NewRequest(c.name, "WalletService.ConvertCoin", in)
	out := new(ConvertCoinResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) Withdrawal(ctx context.Context, in *WithdrawalReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "WalletService.Withdrawal", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) AddIfcBalance(ctx context.Context, in *AddIfcBalanceReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "WalletService.AddIfcBalance", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) GetTotalRebate(ctx context.Context, in *GetTotalRebateReq, opts ...client.CallOption) (*GetTotalRebateResp, error) {
	req := c.c.NewRequest(c.name, "WalletService.GetTotalRebate", in)
	out := new(GetTotalRebateResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) StrategyRunNotify(ctx context.Context, in *StrategyRunNotifyReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "WalletService.StrategyRunNotify", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WalletService internal

type WalletServiceHandler interface {
	CreateWallet(context.Context, *UidReq, *empty.Empty) error
	Transfer(context.Context, *TransferReq, *empty.Empty) error
	GetWalletIFC(context.Context, *UidReq, *WalletBalanceResp) error
	GetWalletUSDT(context.Context, *UidReq, *WalletBalanceResp) error
	GetUsdtDepositAddr(context.Context, *UidReq, *UsdtDepositAddrResp) error
	ConvertCoinTips(context.Context, *ConvertCoinTipsReq, *ConvertCoinTipsResp) error
	ConvertCoin(context.Context, *ConvertCoinReq, *ConvertCoinResp) error
	Withdrawal(context.Context, *WithdrawalReq, *empty.Empty) error
	AddIfcBalance(context.Context, *AddIfcBalanceReq, *empty.Empty) error
	GetTotalRebate(context.Context, *GetTotalRebateReq, *GetTotalRebateResp) error
	StrategyRunNotify(context.Context, *StrategyRunNotifyReq, *empty.Empty) error
}

func RegisterWalletServiceHandler(s server.Server, hdlr WalletServiceHandler, opts ...server.HandlerOption) error {
	type walletService interface {
		CreateWallet(ctx context.Context, in *UidReq, out *empty.Empty) error
		Transfer(ctx context.Context, in *TransferReq, out *empty.Empty) error
		GetWalletIFC(ctx context.Context, in *UidReq, out *WalletBalanceResp) error
		GetWalletUSDT(ctx context.Context, in *UidReq, out *WalletBalanceResp) error
		GetUsdtDepositAddr(ctx context.Context, in *UidReq, out *UsdtDepositAddrResp) error
		ConvertCoinTips(ctx context.Context, in *ConvertCoinTipsReq, out *ConvertCoinTipsResp) error
		ConvertCoin(ctx context.Context, in *ConvertCoinReq, out *ConvertCoinResp) error
		Withdrawal(ctx context.Context, in *WithdrawalReq, out *empty.Empty) error
		AddIfcBalance(ctx context.Context, in *AddIfcBalanceReq, out *empty.Empty) error
		GetTotalRebate(ctx context.Context, in *GetTotalRebateReq, out *GetTotalRebateResp) error
		StrategyRunNotify(ctx context.Context, in *StrategyRunNotifyReq, out *empty.Empty) error
	}
	type WalletService struct {
		walletService
	}
	h := &walletServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&WalletService{h}, opts...))
}

type walletServiceHandler struct {
	WalletServiceHandler
}

func (h *walletServiceHandler) CreateWallet(ctx context.Context, in *UidReq, out *empty.Empty) error {
	return h.WalletServiceHandler.CreateWallet(ctx, in, out)
}

func (h *walletServiceHandler) Transfer(ctx context.Context, in *TransferReq, out *empty.Empty) error {
	return h.WalletServiceHandler.Transfer(ctx, in, out)
}

func (h *walletServiceHandler) GetWalletIFC(ctx context.Context, in *UidReq, out *WalletBalanceResp) error {
	return h.WalletServiceHandler.GetWalletIFC(ctx, in, out)
}

func (h *walletServiceHandler) GetWalletUSDT(ctx context.Context, in *UidReq, out *WalletBalanceResp) error {
	return h.WalletServiceHandler.GetWalletUSDT(ctx, in, out)
}

func (h *walletServiceHandler) GetUsdtDepositAddr(ctx context.Context, in *UidReq, out *UsdtDepositAddrResp) error {
	return h.WalletServiceHandler.GetUsdtDepositAddr(ctx, in, out)
}

func (h *walletServiceHandler) ConvertCoinTips(ctx context.Context, in *ConvertCoinTipsReq, out *ConvertCoinTipsResp) error {
	return h.WalletServiceHandler.ConvertCoinTips(ctx, in, out)
}

func (h *walletServiceHandler) ConvertCoin(ctx context.Context, in *ConvertCoinReq, out *ConvertCoinResp) error {
	return h.WalletServiceHandler.ConvertCoin(ctx, in, out)
}

func (h *walletServiceHandler) Withdrawal(ctx context.Context, in *WithdrawalReq, out *empty.Empty) error {
	return h.WalletServiceHandler.Withdrawal(ctx, in, out)
}

func (h *walletServiceHandler) AddIfcBalance(ctx context.Context, in *AddIfcBalanceReq, out *empty.Empty) error {
	return h.WalletServiceHandler.AddIfcBalance(ctx, in, out)
}

func (h *walletServiceHandler) GetTotalRebate(ctx context.Context, in *GetTotalRebateReq, out *GetTotalRebateResp) error {
	return h.WalletServiceHandler.GetTotalRebate(ctx, in, out)
}

func (h *walletServiceHandler) StrategyRunNotify(ctx context.Context, in *StrategyRunNotifyReq, out *empty.Empty) error {
	return h.WalletServiceHandler.StrategyRunNotify(ctx, in, out)
}
