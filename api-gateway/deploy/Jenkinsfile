pipeline{
    agent any
    environment{
        HARBOR_HOST='192.168.3.30:8086'
        HARBOR_ADDR='192.168.3.30:8086/mateforce'
        DOCKER_IMAGE='api-gateway'
        K8S_NAMESPACE='develop'
//         TARGET_PATH='' //项目路径
    }
    parameters {
        string(name: 'PROJECT_NAME', defaultValue: 'api-gateway', description: 'project name,same as the name ofdocker container')
        string(name: 'CONTAINER_VERSION', defaultValue: '', description: 'docker container version number, SET when major version number changed')
        booleanParam(name: 'DEPLOYMENT_K8S', defaultValue: true, description: 'release deployment k8s')
    }
    stages {
        stage('Initial') {
            steps{
                script {
                        env.DOCKER_IMAGE='${PROJECT_NAME}'
                         APP_NAME = "$PROJECT_NAME"
                         if (APP_NAME ==~ /^api-.*/) {
                             env.TARGET_PATH = "./${APP_NAME}/deploy"
                         } else {
                            env.TARGET_PATH = "./service/${APP_NAME}/deploy"
                         }
                          // 脚本式创建一个环境变量
                        if (params.CONTAINER_VERSION == '') {
                                env.APP_VERSION = 'v1.0.0-alpha'
//                             env.APP_VERSION = sh(returnStdout:true,script:"jenkins-build-tools gen -p ${params.PROJECT_NAME}").trim()
                        }else {
                            env.APP_VERSION ="${params.CONTAINER_VERSION}-alpha"
                        }
                        sh "echo ${env.APP_VERSION}"
                    }
                }
        }
        stage("Docker Build") {
            when {
                allOf {
                    expression { env.APP_VERSION != null }
                }
            }
            steps("Start Build") {
                sh "docker login -u admin -p QQabc123++ ${HARBOR_HOST}"
                sh "docker build --build-arg TARGET_PATH=${TARGET_PATH} -t ${HARBOR_ADDR}/${DOCKER_IMAGE}:${APP_VERSION} -f ${TARGET_PATH}/Dockerfile ."
                sh "docker push ${HARBOR_ADDR}/${DOCKER_IMAGE}:${APP_VERSION}"
                sh "docker rmi ${HARBOR_ADDR}/${DOCKER_IMAGE}:${APP_VERSION} -f"
            }

        }
        stage("Deploy") {
            when {
                allOf {
                    expression { env.APP_VERSION != null }
                }
            }
            steps("Deploy to kubernetes") {
                script {
                    if (params.DEPLOYMENT_K8S) {
                        sh "export KUBECONFIG=${env.KUBECONFIG}"
                        sh "sed -i 's/VERSION_NUMBER/${APP_VERSION}/g' ${TARGET_PATH}/k8s-deployment.yml"
                        sh "kubectl apply -f ${TARGET_PATH}/k8s-deployment.yml --namespace=develop"
                    }
                }
            }
        }
    }
    post {
    		always {
    			echo 'One way or another, I have finished'
    			echo sh(returnStdout: true, script: 'env')
    			deleteDir() /* clean up our workspace */
    		}
    		success {
//     			SendDingding("success")
    			echo 'structure success'
    		}
    		failure {
//     			SendDingding("failure")
    			echo 'structure failure'
    		}
    		unsuccessful {
    			//SendDingding("unsuccessful")
    			echo 'structure unsuccessful'
    		}
    		aborted {
    			//SendDingding("aborted")
    			echo 'structure aborted'
    		}
    		unstable {
    			//SendDingding("unstable")
    			echo 'structure unstable'
    		}
       }
}



