// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommonClient is the client API for Common service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommonClient interface {
	Carousel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CarouselList, error)
	CustomerService(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ContractAddr, error)
	GetAppVersion(ctx context.Context, in *VersionReq, opts ...grpc.CallOption) (*AppVersion, error)
	GetUserRateRank(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserRateRankResp, error)
	GetUserRateYearRank(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserRateRankResp, error)
	PushProfitImageOss(ctx context.Context, in *PushImageReq, opts ...grpc.CallOption) (*ImageResp, error)
}

type commonClient struct {
	cc grpc.ClientConnInterface
}

func NewCommonClient(cc grpc.ClientConnInterface) CommonClient {
	return &commonClient{cc}
}

func (c *commonClient) Carousel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CarouselList, error) {
	out := new(CarouselList)
	err := c.cc.Invoke(ctx, "/api.common.v1.Common/Carousel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonClient) CustomerService(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ContractAddr, error) {
	out := new(ContractAddr)
	err := c.cc.Invoke(ctx, "/api.common.v1.Common/CustomerService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonClient) GetAppVersion(ctx context.Context, in *VersionReq, opts ...grpc.CallOption) (*AppVersion, error) {
	out := new(AppVersion)
	err := c.cc.Invoke(ctx, "/api.common.v1.Common/GetAppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonClient) GetUserRateRank(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserRateRankResp, error) {
	out := new(UserRateRankResp)
	err := c.cc.Invoke(ctx, "/api.common.v1.Common/GetUserRateRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonClient) GetUserRateYearRank(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserRateRankResp, error) {
	out := new(UserRateRankResp)
	err := c.cc.Invoke(ctx, "/api.common.v1.Common/GetUserRateYearRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonClient) PushProfitImageOss(ctx context.Context, in *PushImageReq, opts ...grpc.CallOption) (*ImageResp, error) {
	out := new(ImageResp)
	err := c.cc.Invoke(ctx, "/api.common.v1.Common/PushProfitImageOss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommonServer is the server API for Common service.
// All implementations must embed UnimplementedCommonServer
// for forward compatibility
type CommonServer interface {
	Carousel(context.Context, *emptypb.Empty) (*CarouselList, error)
	CustomerService(context.Context, *emptypb.Empty) (*ContractAddr, error)
	GetAppVersion(context.Context, *VersionReq) (*AppVersion, error)
	GetUserRateRank(context.Context, *emptypb.Empty) (*UserRateRankResp, error)
	GetUserRateYearRank(context.Context, *emptypb.Empty) (*UserRateRankResp, error)
	PushProfitImageOss(context.Context, *PushImageReq) (*ImageResp, error)
	mustEmbedUnimplementedCommonServer()
}

// UnimplementedCommonServer must be embedded to have forward compatible implementations.
type UnimplementedCommonServer struct {
}

func (UnimplementedCommonServer) Carousel(context.Context, *emptypb.Empty) (*CarouselList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Carousel not implemented")
}
func (UnimplementedCommonServer) CustomerService(context.Context, *emptypb.Empty) (*ContractAddr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerService not implemented")
}
func (UnimplementedCommonServer) GetAppVersion(context.Context, *VersionReq) (*AppVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppVersion not implemented")
}
func (UnimplementedCommonServer) GetUserRateRank(context.Context, *emptypb.Empty) (*UserRateRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRateRank not implemented")
}
func (UnimplementedCommonServer) GetUserRateYearRank(context.Context, *emptypb.Empty) (*UserRateRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRateYearRank not implemented")
}
func (UnimplementedCommonServer) PushProfitImageOss(context.Context, *PushImageReq) (*ImageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushProfitImageOss not implemented")
}
func (UnimplementedCommonServer) mustEmbedUnimplementedCommonServer() {}

// UnsafeCommonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommonServer will
// result in compilation errors.
type UnsafeCommonServer interface {
	mustEmbedUnimplementedCommonServer()
}

func RegisterCommonServer(s grpc.ServiceRegistrar, srv CommonServer) {
	s.RegisterService(&Common_ServiceDesc, srv)
}

func _Common_Carousel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServer).Carousel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.common.v1.Common/Carousel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServer).Carousel(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Common_CustomerService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServer).CustomerService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.common.v1.Common/CustomerService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServer).CustomerService(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Common_GetAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServer).GetAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.common.v1.Common/GetAppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServer).GetAppVersion(ctx, req.(*VersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Common_GetUserRateRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServer).GetUserRateRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.common.v1.Common/GetUserRateRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServer).GetUserRateRank(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Common_GetUserRateYearRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServer).GetUserRateYearRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.common.v1.Common/GetUserRateYearRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServer).GetUserRateYearRank(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Common_PushProfitImageOss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServer).PushProfitImageOss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.common.v1.Common/PushProfitImageOss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServer).PushProfitImageOss(ctx, req.(*PushImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Common_ServiceDesc is the grpc.ServiceDesc for Common service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Common_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.common.v1.Common",
	HandlerType: (*CommonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Carousel",
			Handler:    _Common_Carousel_Handler,
		},
		{
			MethodName: "CustomerService",
			Handler:    _Common_CustomerService_Handler,
		},
		{
			MethodName: "GetAppVersion",
			Handler:    _Common_GetAppVersion_Handler,
		},
		{
			MethodName: "GetUserRateRank",
			Handler:    _Common_GetUserRateRank_Handler,
		},
		{
			MethodName: "GetUserRateYearRank",
			Handler:    _Common_GetUserRateYearRank_Handler,
		},
		{
			MethodName: "PushProfitImageOss",
			Handler:    _Common_PushProfitImageOss_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/common/v1/common.proto",
}
