// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuoteClient is the client API for Quote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuoteClient interface {
	GetTicksWithExchange(ctx context.Context, in *GetTicksReq, opts ...grpc.CallOption) (*TickResp, error)
	GetTicksWithExchangeSymbol(ctx context.Context, in *GetTicksSymbolReq, opts ...grpc.CallOption) (*TickResp, error)
	StreamTicks(ctx context.Context, in *GetTicksReq, opts ...grpc.CallOption) (Quote_StreamTicksClient, error)
	GetRate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RateUsdRmb, error)
}

type quoteClient struct {
	cc grpc.ClientConnInterface
}

func NewQuoteClient(cc grpc.ClientConnInterface) QuoteClient {
	return &quoteClient{cc}
}

func (c *quoteClient) GetTicksWithExchange(ctx context.Context, in *GetTicksReq, opts ...grpc.CallOption) (*TickResp, error) {
	out := new(TickResp)
	err := c.cc.Invoke(ctx, "/api.quote.v1.Quote/GetTicksWithExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteClient) GetTicksWithExchangeSymbol(ctx context.Context, in *GetTicksSymbolReq, opts ...grpc.CallOption) (*TickResp, error) {
	out := new(TickResp)
	err := c.cc.Invoke(ctx, "/api.quote.v1.Quote/GetTicksWithExchangeSymbol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteClient) StreamTicks(ctx context.Context, in *GetTicksReq, opts ...grpc.CallOption) (Quote_StreamTicksClient, error) {
	stream, err := c.cc.NewStream(ctx, &Quote_ServiceDesc.Streams[0], "/api.quote.v1.Quote/StreamTicks", opts...)
	if err != nil {
		return nil, err
	}
	x := &quoteStreamTicksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Quote_StreamTicksClient interface {
	Recv() (*TickResp, error)
	grpc.ClientStream
}

type quoteStreamTicksClient struct {
	grpc.ClientStream
}

func (x *quoteStreamTicksClient) Recv() (*TickResp, error) {
	m := new(TickResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *quoteClient) GetRate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RateUsdRmb, error) {
	out := new(RateUsdRmb)
	err := c.cc.Invoke(ctx, "/api.quote.v1.Quote/GetRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuoteServer is the server API for Quote service.
// All implementations must embed UnimplementedQuoteServer
// for forward compatibility
type QuoteServer interface {
	GetTicksWithExchange(context.Context, *GetTicksReq) (*TickResp, error)
	GetTicksWithExchangeSymbol(context.Context, *GetTicksSymbolReq) (*TickResp, error)
	StreamTicks(*GetTicksReq, Quote_StreamTicksServer) error
	GetRate(context.Context, *emptypb.Empty) (*RateUsdRmb, error)
	mustEmbedUnimplementedQuoteServer()
}

// UnimplementedQuoteServer must be embedded to have forward compatible implementations.
type UnimplementedQuoteServer struct {
}

func (UnimplementedQuoteServer) GetTicksWithExchange(context.Context, *GetTicksReq) (*TickResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicksWithExchange not implemented")
}
func (UnimplementedQuoteServer) GetTicksWithExchangeSymbol(context.Context, *GetTicksSymbolReq) (*TickResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicksWithExchangeSymbol not implemented")
}
func (UnimplementedQuoteServer) StreamTicks(*GetTicksReq, Quote_StreamTicksServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTicks not implemented")
}
func (UnimplementedQuoteServer) GetRate(context.Context, *emptypb.Empty) (*RateUsdRmb, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRate not implemented")
}
func (UnimplementedQuoteServer) mustEmbedUnimplementedQuoteServer() {}

// UnsafeQuoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuoteServer will
// result in compilation errors.
type UnsafeQuoteServer interface {
	mustEmbedUnimplementedQuoteServer()
}

func RegisterQuoteServer(s grpc.ServiceRegistrar, srv QuoteServer) {
	s.RegisterService(&Quote_ServiceDesc, srv)
}

func _Quote_GetTicksWithExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServer).GetTicksWithExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.quote.v1.Quote/GetTicksWithExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServer).GetTicksWithExchange(ctx, req.(*GetTicksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quote_GetTicksWithExchangeSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicksSymbolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServer).GetTicksWithExchangeSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.quote.v1.Quote/GetTicksWithExchangeSymbol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServer).GetTicksWithExchangeSymbol(ctx, req.(*GetTicksSymbolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quote_StreamTicks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTicksReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuoteServer).StreamTicks(m, &quoteStreamTicksServer{stream})
}

type Quote_StreamTicksServer interface {
	Send(*TickResp) error
	grpc.ServerStream
}

type quoteStreamTicksServer struct {
	grpc.ServerStream
}

func (x *quoteStreamTicksServer) Send(m *TickResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Quote_GetRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServer).GetRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.quote.v1.Quote/GetRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServer).GetRate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Quote_ServiceDesc is the grpc.ServiceDesc for Quote service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Quote_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.quote.v1.Quote",
	HandlerType: (*QuoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTicksWithExchange",
			Handler:    _Quote_GetTicksWithExchange_Handler,
		},
		{
			MethodName: "GetTicksWithExchangeSymbol",
			Handler:    _Quote_GetTicksWithExchangeSymbol_Handler,
		},
		{
			MethodName: "GetRate",
			Handler:    _Quote_GetRate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTicks",
			Handler:       _Quote_StreamTicks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/quote/v1/quote.proto",
}
