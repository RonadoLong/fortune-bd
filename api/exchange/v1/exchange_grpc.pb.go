// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExOrderClient is the client API for ExOrder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExOrderClient interface {
	ExChangeInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ExChangeList, error)
	AddExchangeApi(ctx context.Context, in *ExchangeApi, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetExchangeApiList(ctx context.Context, in *GetExApiReq, opts ...grpc.CallOption) (*ExApiResp, error)
	UpdateExchangeApi(ctx context.Context, in *UpdateExchangeApiReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteExchangeApi(ctx context.Context, in *UserApiReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTradeList(ctx context.Context, in *GetTradeListReq, opts ...grpc.CallOption) (*TradeListResp, error)
	GetProfitRealTime(ctx context.Context, in *ProfitReq, opts ...grpc.CallOption) (*ProfitRealTimeResp, error)
	Evaluation(ctx context.Context, in *TradeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EvaluationSpot(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetExchangePos(ctx context.Context, in *GetExchangePosReq, opts ...grpc.CallOption) (*ExchangePosResp, error)
	GetTradeSymbols(ctx context.Context, in *TradeSymbolReq, opts ...grpc.CallOption) (*GetSymbolsResp, error)
	GetUserStrategyEva(ctx context.Context, in *UserStrategyDetailReq, opts ...grpc.CallOption) (*UserStrategyEvaResp, error)
	GetApiKeyInfo(ctx context.Context, in *UserApiKeyReq, opts ...grpc.CallOption) (*ExchangeApiResp, error)
	GetAssetsByAllApiKey(ctx context.Context, in *GetExApiReq, opts ...grpc.CallOption) (*AssertsResp, error)
	GetSymbolRankWithRateYear(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SymbolRankWithRateYearResp, error)
	StrategyProfitCompensate(ctx context.Context, in *StrategyProfitCompensateReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type exOrderClient struct {
	cc grpc.ClientConnInterface
}

func NewExOrderClient(cc grpc.ClientConnInterface) ExOrderClient {
	return &exOrderClient{cc}
}

func (c *exOrderClient) ExChangeInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ExChangeList, error) {
	out := new(ExChangeList)
	err := c.cc.Invoke(ctx, "/api.exchange.v1.ExOrder/ExChangeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exOrderClient) AddExchangeApi(ctx context.Context, in *ExchangeApi, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.exchange.v1.ExOrder/AddExchangeApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exOrderClient) GetExchangeApiList(ctx context.Context, in *GetExApiReq, opts ...grpc.CallOption) (*ExApiResp, error) {
	out := new(ExApiResp)
	err := c.cc.Invoke(ctx, "/api.exchange.v1.ExOrder/GetExchangeApiList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exOrderClient) UpdateExchangeApi(ctx context.Context, in *UpdateExchangeApiReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.exchange.v1.ExOrder/UpdateExchangeApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exOrderClient) DeleteExchangeApi(ctx context.Context, in *UserApiReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.exchange.v1.ExOrder/DeleteExchangeApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exOrderClient) GetTradeList(ctx context.Context, in *GetTradeListReq, opts ...grpc.CallOption) (*TradeListResp, error) {
	out := new(TradeListResp)
	err := c.cc.Invoke(ctx, "/api.exchange.v1.ExOrder/GetTradeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exOrderClient) GetProfitRealTime(ctx context.Context, in *ProfitReq, opts ...grpc.CallOption) (*ProfitRealTimeResp, error) {
	out := new(ProfitRealTimeResp)
	err := c.cc.Invoke(ctx, "/api.exchange.v1.ExOrder/GetProfitRealTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exOrderClient) Evaluation(ctx context.Context, in *TradeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.exchange.v1.ExOrder/Evaluation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exOrderClient) EvaluationSpot(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.exchange.v1.ExOrder/EvaluationSpot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exOrderClient) GetExchangePos(ctx context.Context, in *GetExchangePosReq, opts ...grpc.CallOption) (*ExchangePosResp, error) {
	out := new(ExchangePosResp)
	err := c.cc.Invoke(ctx, "/api.exchange.v1.ExOrder/GetExchangePos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exOrderClient) GetTradeSymbols(ctx context.Context, in *TradeSymbolReq, opts ...grpc.CallOption) (*GetSymbolsResp, error) {
	out := new(GetSymbolsResp)
	err := c.cc.Invoke(ctx, "/api.exchange.v1.ExOrder/GetTradeSymbols", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exOrderClient) GetUserStrategyEva(ctx context.Context, in *UserStrategyDetailReq, opts ...grpc.CallOption) (*UserStrategyEvaResp, error) {
	out := new(UserStrategyEvaResp)
	err := c.cc.Invoke(ctx, "/api.exchange.v1.ExOrder/GetUserStrategyEva", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exOrderClient) GetApiKeyInfo(ctx context.Context, in *UserApiKeyReq, opts ...grpc.CallOption) (*ExchangeApiResp, error) {
	out := new(ExchangeApiResp)
	err := c.cc.Invoke(ctx, "/api.exchange.v1.ExOrder/GetApiKeyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exOrderClient) GetAssetsByAllApiKey(ctx context.Context, in *GetExApiReq, opts ...grpc.CallOption) (*AssertsResp, error) {
	out := new(AssertsResp)
	err := c.cc.Invoke(ctx, "/api.exchange.v1.ExOrder/GetAssetsByAllApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exOrderClient) GetSymbolRankWithRateYear(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SymbolRankWithRateYearResp, error) {
	out := new(SymbolRankWithRateYearResp)
	err := c.cc.Invoke(ctx, "/api.exchange.v1.ExOrder/GetSymbolRankWithRateYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exOrderClient) StrategyProfitCompensate(ctx context.Context, in *StrategyProfitCompensateReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.exchange.v1.ExOrder/StrategyProfitCompensate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExOrderServer is the server API for ExOrder service.
// All implementations must embed UnimplementedExOrderServer
// for forward compatibility
type ExOrderServer interface {
	ExChangeInfo(context.Context, *emptypb.Empty) (*ExChangeList, error)
	AddExchangeApi(context.Context, *ExchangeApi) (*emptypb.Empty, error)
	GetExchangeApiList(context.Context, *GetExApiReq) (*ExApiResp, error)
	UpdateExchangeApi(context.Context, *UpdateExchangeApiReq) (*emptypb.Empty, error)
	DeleteExchangeApi(context.Context, *UserApiReq) (*emptypb.Empty, error)
	GetTradeList(context.Context, *GetTradeListReq) (*TradeListResp, error)
	GetProfitRealTime(context.Context, *ProfitReq) (*ProfitRealTimeResp, error)
	Evaluation(context.Context, *TradeReq) (*emptypb.Empty, error)
	EvaluationSpot(context.Context, *OrderReq) (*emptypb.Empty, error)
	GetExchangePos(context.Context, *GetExchangePosReq) (*ExchangePosResp, error)
	GetTradeSymbols(context.Context, *TradeSymbolReq) (*GetSymbolsResp, error)
	GetUserStrategyEva(context.Context, *UserStrategyDetailReq) (*UserStrategyEvaResp, error)
	GetApiKeyInfo(context.Context, *UserApiKeyReq) (*ExchangeApiResp, error)
	GetAssetsByAllApiKey(context.Context, *GetExApiReq) (*AssertsResp, error)
	GetSymbolRankWithRateYear(context.Context, *emptypb.Empty) (*SymbolRankWithRateYearResp, error)
	StrategyProfitCompensate(context.Context, *StrategyProfitCompensateReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedExOrderServer()
}

// UnimplementedExOrderServer must be embedded to have forward compatible implementations.
type UnimplementedExOrderServer struct {
}

func (UnimplementedExOrderServer) ExChangeInfo(context.Context, *emptypb.Empty) (*ExChangeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExChangeInfo not implemented")
}
func (UnimplementedExOrderServer) AddExchangeApi(context.Context, *ExchangeApi) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExchangeApi not implemented")
}
func (UnimplementedExOrderServer) GetExchangeApiList(context.Context, *GetExApiReq) (*ExApiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeApiList not implemented")
}
func (UnimplementedExOrderServer) UpdateExchangeApi(context.Context, *UpdateExchangeApiReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExchangeApi not implemented")
}
func (UnimplementedExOrderServer) DeleteExchangeApi(context.Context, *UserApiReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExchangeApi not implemented")
}
func (UnimplementedExOrderServer) GetTradeList(context.Context, *GetTradeListReq) (*TradeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradeList not implemented")
}
func (UnimplementedExOrderServer) GetProfitRealTime(context.Context, *ProfitReq) (*ProfitRealTimeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfitRealTime not implemented")
}
func (UnimplementedExOrderServer) Evaluation(context.Context, *TradeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Evaluation not implemented")
}
func (UnimplementedExOrderServer) EvaluationSpot(context.Context, *OrderReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluationSpot not implemented")
}
func (UnimplementedExOrderServer) GetExchangePos(context.Context, *GetExchangePosReq) (*ExchangePosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangePos not implemented")
}
func (UnimplementedExOrderServer) GetTradeSymbols(context.Context, *TradeSymbolReq) (*GetSymbolsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradeSymbols not implemented")
}
func (UnimplementedExOrderServer) GetUserStrategyEva(context.Context, *UserStrategyDetailReq) (*UserStrategyEvaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStrategyEva not implemented")
}
func (UnimplementedExOrderServer) GetApiKeyInfo(context.Context, *UserApiKeyReq) (*ExchangeApiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiKeyInfo not implemented")
}
func (UnimplementedExOrderServer) GetAssetsByAllApiKey(context.Context, *GetExApiReq) (*AssertsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetsByAllApiKey not implemented")
}
func (UnimplementedExOrderServer) GetSymbolRankWithRateYear(context.Context, *emptypb.Empty) (*SymbolRankWithRateYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSymbolRankWithRateYear not implemented")
}
func (UnimplementedExOrderServer) StrategyProfitCompensate(context.Context, *StrategyProfitCompensateReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StrategyProfitCompensate not implemented")
}
func (UnimplementedExOrderServer) mustEmbedUnimplementedExOrderServer() {}

// UnsafeExOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExOrderServer will
// result in compilation errors.
type UnsafeExOrderServer interface {
	mustEmbedUnimplementedExOrderServer()
}

func RegisterExOrderServer(s grpc.ServiceRegistrar, srv ExOrderServer) {
	s.RegisterService(&ExOrder_ServiceDesc, srv)
}

func _ExOrder_ExChangeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExOrderServer).ExChangeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.exchange.v1.ExOrder/ExChangeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExOrderServer).ExChangeInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExOrder_AddExchangeApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeApi)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExOrderServer).AddExchangeApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.exchange.v1.ExOrder/AddExchangeApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExOrderServer).AddExchangeApi(ctx, req.(*ExchangeApi))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExOrder_GetExchangeApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExOrderServer).GetExchangeApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.exchange.v1.ExOrder/GetExchangeApiList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExOrderServer).GetExchangeApiList(ctx, req.(*GetExApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExOrder_UpdateExchangeApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExchangeApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExOrderServer).UpdateExchangeApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.exchange.v1.ExOrder/UpdateExchangeApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExOrderServer).UpdateExchangeApi(ctx, req.(*UpdateExchangeApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExOrder_DeleteExchangeApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExOrderServer).DeleteExchangeApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.exchange.v1.ExOrder/DeleteExchangeApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExOrderServer).DeleteExchangeApi(ctx, req.(*UserApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExOrder_GetTradeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExOrderServer).GetTradeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.exchange.v1.ExOrder/GetTradeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExOrderServer).GetTradeList(ctx, req.(*GetTradeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExOrder_GetProfitRealTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExOrderServer).GetProfitRealTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.exchange.v1.ExOrder/GetProfitRealTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExOrderServer).GetProfitRealTime(ctx, req.(*ProfitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExOrder_Evaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExOrderServer).Evaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.exchange.v1.ExOrder/Evaluation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExOrderServer).Evaluation(ctx, req.(*TradeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExOrder_EvaluationSpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExOrderServer).EvaluationSpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.exchange.v1.ExOrder/EvaluationSpot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExOrderServer).EvaluationSpot(ctx, req.(*OrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExOrder_GetExchangePos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangePosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExOrderServer).GetExchangePos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.exchange.v1.ExOrder/GetExchangePos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExOrderServer).GetExchangePos(ctx, req.(*GetExchangePosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExOrder_GetTradeSymbols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeSymbolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExOrderServer).GetTradeSymbols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.exchange.v1.ExOrder/GetTradeSymbols",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExOrderServer).GetTradeSymbols(ctx, req.(*TradeSymbolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExOrder_GetUserStrategyEva_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStrategyDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExOrderServer).GetUserStrategyEva(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.exchange.v1.ExOrder/GetUserStrategyEva",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExOrderServer).GetUserStrategyEva(ctx, req.(*UserStrategyDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExOrder_GetApiKeyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserApiKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExOrderServer).GetApiKeyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.exchange.v1.ExOrder/GetApiKeyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExOrderServer).GetApiKeyInfo(ctx, req.(*UserApiKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExOrder_GetAssetsByAllApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExOrderServer).GetAssetsByAllApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.exchange.v1.ExOrder/GetAssetsByAllApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExOrderServer).GetAssetsByAllApiKey(ctx, req.(*GetExApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExOrder_GetSymbolRankWithRateYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExOrderServer).GetSymbolRankWithRateYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.exchange.v1.ExOrder/GetSymbolRankWithRateYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExOrderServer).GetSymbolRankWithRateYear(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExOrder_StrategyProfitCompensate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrategyProfitCompensateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExOrderServer).StrategyProfitCompensate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.exchange.v1.ExOrder/StrategyProfitCompensate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExOrderServer).StrategyProfitCompensate(ctx, req.(*StrategyProfitCompensateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ExOrder_ServiceDesc is the grpc.ServiceDesc for ExOrder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExOrder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.exchange.v1.ExOrder",
	HandlerType: (*ExOrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExChangeInfo",
			Handler:    _ExOrder_ExChangeInfo_Handler,
		},
		{
			MethodName: "AddExchangeApi",
			Handler:    _ExOrder_AddExchangeApi_Handler,
		},
		{
			MethodName: "GetExchangeApiList",
			Handler:    _ExOrder_GetExchangeApiList_Handler,
		},
		{
			MethodName: "UpdateExchangeApi",
			Handler:    _ExOrder_UpdateExchangeApi_Handler,
		},
		{
			MethodName: "DeleteExchangeApi",
			Handler:    _ExOrder_DeleteExchangeApi_Handler,
		},
		{
			MethodName: "GetTradeList",
			Handler:    _ExOrder_GetTradeList_Handler,
		},
		{
			MethodName: "GetProfitRealTime",
			Handler:    _ExOrder_GetProfitRealTime_Handler,
		},
		{
			MethodName: "Evaluation",
			Handler:    _ExOrder_Evaluation_Handler,
		},
		{
			MethodName: "EvaluationSpot",
			Handler:    _ExOrder_EvaluationSpot_Handler,
		},
		{
			MethodName: "GetExchangePos",
			Handler:    _ExOrder_GetExchangePos_Handler,
		},
		{
			MethodName: "GetTradeSymbols",
			Handler:    _ExOrder_GetTradeSymbols_Handler,
		},
		{
			MethodName: "GetUserStrategyEva",
			Handler:    _ExOrder_GetUserStrategyEva_Handler,
		},
		{
			MethodName: "GetApiKeyInfo",
			Handler:    _ExOrder_GetApiKeyInfo_Handler,
		},
		{
			MethodName: "GetAssetsByAllApiKey",
			Handler:    _ExOrder_GetAssetsByAllApiKey_Handler,
		},
		{
			MethodName: "GetSymbolRankWithRateYear",
			Handler:    _ExOrder_GetSymbolRankWithRateYear_Handler,
		},
		{
			MethodName: "StrategyProfitCompensate",
			Handler:    _ExOrder_StrategyProfitCompensate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/exchange/v1/exchange.proto",
}
