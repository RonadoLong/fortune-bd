// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: forwardOffer.proto

package fotune_srv_exchange

import (
	"fmt"
	"github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/ptypes/empty"
	"math"
)

import (
	"context"
	"github.com/micro/go-micro/v2/client"
	"github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ForwardOffer service

type ForwardOfferService interface {
	PushSwapOrder(ctx context.Context, in *TradeSignal, opts ...client.CallOption) (*empty.Empty, error)
}

type forwardOfferService struct {
	c    client.Client
	name string
}

func NewForwardOfferService(name string, c client.Client) ForwardOfferService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "forwardoffer"
	}
	return &forwardOfferService{
		c:    c,
		name: name,
	}
}

func (c *forwardOfferService) PushSwapOrder(ctx context.Context, in *TradeSignal, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "ForwardOffer.PushSwapOrder", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ForwardOffer service

type ForwardOfferHandler interface {
	PushSwapOrder(context.Context, *TradeSignal, *empty.Empty) error
}

func RegisterForwardOfferHandler(s server.Server, hdlr ForwardOfferHandler, opts ...server.HandlerOption) error {
	type forwardOffer interface {
		PushSwapOrder(ctx context.Context, in *TradeSignal, out *empty.Empty) error
	}
	type ForwardOffer struct {
		forwardOffer
	}
	h := &forwardOfferHandler{hdlr}
	return s.Handle(s.NewHandler(&ForwardOffer{h}, opts...))
}

type forwardOfferHandler struct {
	ForwardOfferHandler
}

func (h *forwardOfferHandler) PushSwapOrder(ctx context.Context, in *TradeSignal, out *empty.Empty) error {
	return h.ForwardOfferHandler.PushSwapOrder(ctx, in, out)
}
